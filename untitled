import os
import sys
import random
import librosa
import pywt
import numpy as np
import tensorflow as tf


class AudioWaveletDatasetGenerator:
    """
    Class to manage the dataset for audio generation.
    """

    def __init__(self, fft_size=2048, window_size=1024, hop_size=512,
                 sequence_length=16, sample_rate=44100):
        """Inits the class. Set the fft values to have a significant effect on
        the training of the neural network."""
        self.x_frames = []
        self.y_frames = []
        self.window_size = window_size
        self.sample_rate = sample_rate
        self.sequence_lenth = sequence_length
        self.coeffslices
        
    def load(self, data_path, force=False):
        """Loads the dataset from either the binary numpy file, or generates
        from a folder of wav files specified at the data_path."""
        x_frames_name = os.path.join(data_path, "x_frames.npy")
        y_frames_name = os.path.join(data_path, "y_frames.npy")
        if os.path.isfile(x_frames_name) and os.path.isfile(y_frames_name) and force == False:
            self.x_frames = np.load(x_frames_name)
            self.y_frames = np.load(y_frames_name)
        elif os.path.exists(data_path):
            self._generate_data(data_path)
            self.x_frames = np.array(self.x_frames)
            self.y_frames = np.array(self.y_frames)
            self.x_frames, self.y_frames = self.unison_shuffled_copies(self.x_frames,
                                                                       self.y_frames)
            np.save(x_frames_name, self.x_frames)
            np.save(y_frames_name, self.y_frames)
        else:
            raise ValueError("Couldn't load files from the supplied path.")

    def _generate_data(self, data_path):
        """Create some data from a folder of wav files.
        NOTE: the augmentation process should be parameterised."""
        file_names = os.listdir(data_path)
        
        wavelet_frames = []
        self.x_frames = []
        self.y_frames = []
        ws = self.windowsize
        for file in file_names:
            if file.endswith('.wav'):
                file = os.path.join(data_path, file)
                data, sample_rate = librosa.load(file, sr=self.sample_rate,
                                                 mono=True)
                
                for i in range floor(len(data)/ws):
                    coeffs = wavedec(data[i*ws:i*ws+self.windowsize], 'db10')
                    coeff_arr, self.coeff_slices = pywt.coeffs_to_array(coeffs) #slices to flat array
                    wavelet_frames.append(coeff_arr) 

        start = 0
        end = len(wavelet_frames) - self.sequence_length - 1
        step = 1
        for i in range(start, end, step):
            done = int(float(i) / float(end) * 100.0)
            sys.stdout.write('{}% data generation complete.   \r'.format(done))
            sys.stdout.flush()

            x = wavelet_frames[i:i + self.sequence_length]
            y = wavelet_frames[i + self.sequence_length]
            self.x_frames.append(x)
            self.y_frames.append(y)

        sys.stdout.write('100% data generation complete.')
        sys.stdout.flush()